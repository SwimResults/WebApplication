# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "master", "develop" ]
  pull_request:
    branches: [ "master", "develop" ]
  workflow_dispatch:

env:
  NODE_VERSION: 20.x
  CLI_VERSION: 20.0.2

  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  install:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    - run: npm install

  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        Test: [Test,Lint]

    needs: install

    steps:
    - uses: actions/checkout@v3
    - name: Test (${{ matrix.Test }})
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    - run: npm link @angular/cli@${{ env.CLI_VERSION }}
    - if: ${{ matrix.Test == 'Lint' }}
      run: npm run test:lint
    - if: ${{ matrix.Test == 'Test' }}
      run: npm run test:test

  build:
    runs-on: ubuntu-latest

    needs: test
    if: github.event_name != 'pull_request'

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    -   run: npm link @angular/cli@${{ env.CLI_VERSION }}
    -   run: npm run build:${GITHUB_REF##*/}
    - name: Cache build output
      uses: actions/cache/save@v4
      env:
        cache-name: cache-dist
      with:
        path: dist/
        key: ${{ runner.os }}-${{ github.run_id }}

  publish:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    steps:
    - uses: actions/checkout@v3

    # Install the cosign tool except on PR
    # https://github.com/sigstore/cosign-installer
    - name: Install cosign
      if: github.event_name != 'pull_request'
      uses: sigstore/cosign-installer@v3.1.1
      with:
        cosign-release: 'v2.1.1'

    # Workaround: https://github.com/docker/build-push-action/issues/461
    - name: Setup Docker buildx
      uses: docker/setup-buildx-action@79abd3f86f79a9d68a23c75a09a9a85889262adf

    # Login against a Docker registry except on PR
    # https://github.com/docker/login-action
    - name: Log into registry ${{ env.REGISTRY }}
      if: github.event_name != 'pull_request'
      uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # Extract metadata (tags, labels) for Docker
    # https://github.com/docker/metadata-action
    - name: Extract Docker metadata
      id: meta
      uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}


    - name: Use cached build output
      uses: actions/cache/restore@v4
      env:
        cache-name: cache-dist
      with:
        path: dist/
        key: ${{ runner.os }}-${{ github.run_id }}

     # Build and push Docker image with Buildx (don't push on PR)
    # https://github.com/docker/build-push-action
    - name: Build and push Docker image
      id: build-and-push
      uses: docker/build-push-action@ac9327eae2b366085ac7f6a2d02df8aa8ead720a
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
